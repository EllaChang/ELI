;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;;  Question Answering Task
;;;

(require :dict)

(defun answer (question story)
  (let ((ls (list (list 'dummy 'h)))
  (question-cd (parse-question question)))
    (dolist (sentence story)
      (let ((sentence-cd (parse sentence)))
  (when (and (equal (header-cd sentence-cd) (header-cd question-cd))
             (or (equal (filler-role sentence-cd '(actor)) (filler-role question-cd '(actor)))
                 (equal (filler-role sentence-cd '(object)) (filler-role question-cd '(object)))
                 (equal (filler-role sentence-cd '(to) (filler-role question-cd '(to))))))
    (write (filler-role sentence-cd '(object)))
    (push (list sentence-cd sentence) (cdr (last ls))))))
    (dolist (pair (cdr ls))
      (format t "~%The answer to the given question is:~%")
      (cond
       ((equal (filler-role 'to (nth 0 pair)) (filler-role 'to question-cd)) 
               (return-from answer (nth 1 pair)))
       (t (return-from answer nil))))))

(setq story1
      '((jack went to the store)
	     (jack got a red kite)
	     (jack went home)))

(setq story2
      '((jack went to the store)
       (bob went to the beach)
       (jack got a kite)
       (bob got a seashell)))

(setq story3
      '((nene went to the beach)
       (ella got a red knife)
       (ella went to Hawaii)))

(setq red-kite
      '(jack got a red kite))

(setq checks
      '((jack paid the check with a check)))

(setq store
      '((jack went to the store)))

(setq q-who-store
      '(who went to the store))

(setq q-who-beach
      '(who went to the beach))

(setq q-who-kite
      '(who got a kite))

(setq q-where-jack
      '(where did jack go))

(setq q-where-bob
      '(where did bob go))

(setq q-do
      '((what did jack do)))

(provide :question-answering)